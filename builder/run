#!/bin/bash

set -x

set -eo pipefail

echo "Beginning run"

# If WordPress has not been installed yet, unpack it.
if [ ! -f wp-config-sample.php ]; then

    tar --strip-components=1 -xzf /opt/app-root/downloads/wordpress.tar.gz

    # Edit the wp-config-sample.php to allow plugins and themes to be
    # installed directly into file system.

    sed -i "/'DB_COLLATE', *'');/a\
    define('FS_METHOD', 'direct');" wp-config-sample.php

    # Edit the wp-config-sample.php to force use of a secure connection
    # for login and adminstration.

    sed -i "/'DB_COLLATE', *'');/a\
    define( 'FORCE_SSL_ADMIN', true );" wp-config-sample.php

    # Edit the wp-config-sample.php to ensure that static files are served
    # up over same protocol as request to avoid mixed content errors.

    sed -i "/'DB_COLLATE', *'');/a\
    if (strpos(\$_SERVER['HTTP_X_FORWARDED_PROTO'], 'https') !== false) \$_SERVER['HTTPS']='on';" wp-config-sample.php
fi

# Check whether the wp-config.php file has been generated previously. If
# not then we need to generate it. This is placed in the persistent volume.

secret() {
    python -c 'import random; import string; print("".join([random.SystemRandom().choice(string.ascii_letters+string.digits) for i in range(50)]))'
}

if [ ! -f wp-config.php ]; then
    TMPCONFIG=/tmp/wp-config-temp.php
    cp wp-config-sample.php $TMPCONFIG

    sed -i "s/'DB_NAME', *'database_name_here'/'DB_NAME', '$MYSQL_DATABASE'/" $TMPCONFIG
    sed -i "s/'DB_USER', *'username_here'/'DB_USER', '$MYSQL_USER'/" $TMPCONFIG
    sed -i "s/'DB_PASSWORD', *'password_here'/'DB_PASSWORD', '$MYSQL_PASSWORD'/" $TMPCONFIG
    sed -i "s/'DB_HOST', *'localhost'/'DB_HOST', '$MYSQL_HOST'/" $TMPCONFIG
    sed -i "s/\$table_prefix *= *'wp_';/\$table_prefix = '$MYSQL_TABLE_PREFIX';/" $TMPCONFIG

    sed -i "s/'AUTH_KEY', *'put your unique phrase here'/'AUTH_KEY', '`secret`'/" $TMPCONFIG
    sed -i "s/'SECURE_AUTH_KEY', *'put your unique phrase here'/'SECURE_AUTH_KEY', '`secret`'/" $TMPCONFIG
    sed -i "s/'LOGGED_IN_KEY', *'put your unique phrase here'/'LOGGED_IN_KEY', '`secret`'/" $TMPCONFIG
    sed -i "s/'NONCE_KEY', *'put your unique phrase here'/'NONCE_KEY', '`secret`'/" $TMPCONFIG
    sed -i "s/'AUTH_SALT', *'put your unique phrase here'/'AUTH_SALT', '`secret`'/" $TMPCONFIG
    sed -i "s/'SECURE_AUTH_SALT', *'put your unique phrase here'/'SECURE_AUTH_SALT', '`secret`'/" $TMPCONFIG
    sed -i "s/'LOGGED_IN_SALT', *'put your unique phrase here'/'LOGGED_IN_SALT', '`secret`'/" $TMPCONFIG
    sed -i "s/'NONCE_SALT', *'put your unique phrase here'/'NONCE_SALT', '`secret`'/" $TMPCONFIG

    mv $TMPCONFIG wp-config.php

fi


# Copy user provided plugins, themes, language files and configuration
# files into the persistent volume. This happens every time the image is
# started, which is not ideal. If application is scaled, then could also
# occur from multple replicas at the same time. No obvious way to avoid
# that, so outstanding question as to whether that will cause any issues.

if [ -d /opt/app-root/downloads/plugins ]; then
    cp -rf /opt/app-root/downloads/plugins/* wp-content/plugins/ 2>/dev/null || true
fi

if [ -d /opt/app-root/downloads/themes ]; then
    cp -rf /opt/app-root/downloads/themes/* wp-content/themes/ 2>/dev/null || true
fi

if [ -d /opt/app-root/downloads/languages ]; then
    cp -rf /opt/app-root/downloads/languages/* wp-content/languages/ 2>/dev/null || true
fi

if [ -f /opt/app-root/downloads/configs/wp-config.php ]; then
    cp -f /opt/app-root/downloads/configs/wp-config.php wp-config.php
fi

if [ -f /opt/app-root/downloads/configs/.htaccess ]; then
    cp -f /opt/app-root/downloads/configs/.htaccess .htaccess
fi

# Enable WebDav access if authentication realm set and user database exists.

if [ x"$WEBDAV_AUTHENTICATION_REALM" != x"" ]; then
    if [ -f /opt/app-root/secrets/webdav/.htdigest ]; then
        cat > /opt/app-root/etc/conf.d/90-webdav.conf << !
<IfModule !dav_module>
LoadModule dav_module modules/mod_dav.so'
</IfModule>

<IfModule !dav_fs_module>
LoadModule dav_fs_module modules/mod_dav_fs.so'
</IfModule>

<IfModule !auth_digest_module>
LoadModule auth_digest_module modules/mod_auth_digest.so'
</IfModule>

<IfModule !authn_file_module>
LoadModule authn_file_module modules/mod_authn_file.so'
</IfModule>

<IfModule !authz_user_module>
LoadModule authz_user_module modules/mod_authz_user.so'
</IfModule>

DavLockDB /opt/app-root/DavLock

Alias /webdav/ /opt/app-root/src/

<Location /webdav/>
    DAV on

    ForceType text/plain
    DirectoryIndex disabled

    AuthType Digest
    AuthName "$WEBDAV_AUTHENTICATION_REALM"
    AuthDigestDomain /webdav/
    AuthDigestProvider file
    AuthUserFile /opt/app-root/secrets/webdav/.htdigest

    Require valid-user
</Location>
!
    fi
fi

#install the themes and user/database for wordpress
if [ ! -f .ransetup ]; then
  echo "In run setup branch"

  # Install the WordPress database.
  echo "Installing WordPress database"
  /tmp/bin/wp core install --path="./" --url="$WORDPRESSHOSTNAME" --title="$APPLICATION_NAME" --admin_user="$WORDPRESS_USERNAME" --admin_password="$WORDPRESS_PASSWORD" --admin_email="$WORDPRESS_EMAIL"


  #if CAWeb theme is available install
  if [ -f /tmp/bin/wp-content/themes/CAWeb ]; then
    Install CAWeb Theme and activate it
   echo "Installing CAWeb Theme"
   /tmp/bin/wp theme activate CAWeb
  fi

  #add additional customization to install page content
  
wp option update show_on_front page --path="$WP_PATH"
wp option update page_on_front 2 --path="$WP_PATH"

# Main Page
wp post update 2 --path="$WP_PATH"  --post_title="Front Page" --post_content='<article class="half p-l-0"><h1>State Template v5</h1><p>The California State Template is an open source web template and  standard offered by the California Department of Technology to state agencies and departments within the State of California and beyond. </p><p>As part of this release  GitHub is leveraged  to provide and encourage better collaboration. The California state template is open sourced and belongs to the California web community and participation is welcome. </p><p>The v5 release there will be several versions available namely HTML/Dreamweaver, .NET (MVC and Web Forms), PHP and WordPress.</p><p>This is a living document and changes to this template, the sample and instructional pages are made daily and can be tracked on the <a href="https://github.com/Office-of-Digital-Innovation/California-State-Template-v5" target="_blank">GitHub Repository</a>.</p><p><span class="label label-info">Note:</span> You will be able to download each version using the GitHub repository links. Look for the "Clone or Download" button on the respective GitHub page.</p><p>&nbsp;</p></article><article class="half p-t-md"><div class="panel panel-default"><div class="panel-heading"><h2><span class="ca-gov-icon-download"></span> Available Downloads</h2></div><div class="panel-body"><ul class="list-standout"><li><a href="https://github.com/Office-of-Digital-Innovation/California-State-Template-v5" target="_blank"><strong>HTML/Dreamwever</strong></a><br>This is the standard HTML/Dreamweaver package with sample content</li><li><a href="https://github.com/Office-of-Digital-Innovation/California-State-Template-MVC-v5" target="_blank"><strong>.NET(MVC)</strong></a><br>This is the .NET MVC package that includes setup instructions</li><li><a href="https://github.com/Office-of-Digital-Innovation/California-State-Template-Web-Forms" target="_blank"><strong>.NET(Web Forms)</strong></a><br>This is the .NET Web Forms package  that includes setup instructions</li><li><strong><a href="https://github.com/Office-of-Digital-Innovation/California-State-Template-PHP" target="_blank">PHP</a></strong><br>This is the PHP package that includes setup instructions</li><li><strong><a href="http://caweb.ca.gov/" target="_blank">WordPress CMS</a></strong><br>Please contact<a href="mailto:Info.Eservices@state.ca.gov">Info.Eservices@state.ca.gov</a> for more information</li></ul></div></div></article>'


# Create Structure Page
wp post create --path="$WP_PATH" --post_title="Structure" --post_type="page" --post_status="publish" --post_content='<h1>State Template Structure</h1><p>This section describes the high-level items that are included in the State Template package that will be provided to State agencies and departments through <a href="http://webtools.ca.gov">WebTools</a>.</p><div class="group"><div class="half"><h2>New Page Structure in v5</h2><p>There are several new structural elements in the v5 of the state template. Most are optional and one is required namely the <code>utility-header.html</code> located in the <code>ssi</code> folder of the template.</p><ul class="list-standout"><li><strong>Utility Header</strong><br>This is the new header module that is required in the new template containing the Ca.gov logo and several other features. The Utility Header is the top most content bar in the template header area.</li><li><strong>Location Bar</strong> <br>This optional module provides a placeholder for letting users set their location. This requires adittional coding to enable the location functionality. More information coming soon.</li><li><strong>Settings Bar</strong> <br>This is a fully functioning feature that allows users to increase and decrease the font size as well as toggle to a high contrast viewing mode. The Settings Bar can be seen in the top right corner of the page.</li><li><strong>Alert Banner</strong> <br>This is a banner that serves as a tool to communicate important or timely information to your users.</li></ul><h2>Server Side Includes</h2><p>Several common components (such as page headers, footers, navigation, etc.) are included in pages using Server Side Includes (SSI). Note that the web server that hosts the State Template should be configured to process SSIs with the .html extension.</p><h2>Icon Fonts</h2><p>Icon Fonts are also included as part of the State Template. These icon fonts were developed by OTECH, with some additions from other sources.</p><p>The Sample Pages included with the State Template package include a list of available icon fonts, as well as instructions on how to use them in page markup. </p><h2>&nbsp;</h2></div><div class="half"><h2>File and Folder Structure</h2><p>The following is the file and folder structure for the 2014 State Template package.</p><ul class="list-standout"><li><strong>css</strong> –  This folder contains the minified CSS files that are generated through  compilation of the LESS files.</li><li><strong>fonts</strong> – Contains icon fonts and type fonts used by the State Template.</li><li><strong>images</strong> – This folder contains the structural images used by the State Template.</li><li><strong>js</strong> –  Contains the compiled, minified JavaScript files that are used by the State  Template. Third party JavaScript libraries are also included in this folder.</li><li><strong>sample</strong> – The “sample” folder contains various HTML files that provide example code and  individual component documentation for the State Template.</li><li><strong>ssi</strong> –  This folder contains the common template components used on various pages in the  State Template (for example, header, footers, navigation, etc.).</li><li><strong>templates</strong> – Contains template files for the State Template that will be utilized by  webmasters that use Adobe Dreamweaver.<p></p></li></ul><p></p><h2>Mime Type Configurations</h2><p>Newer versions of IIS (such as 8.5) already have mime types defined for fonts. However, older versions may need to be configured to serve those mime types for fonts. The same may apply for other web servers such as Apache HTTP Server. Below is a list of the mime types that must be defined for the 2014 State Template.</p><ul class="list-standout"><li>.eot - application/vnd.ms-fontobject</li><li>.ttf - application/octet-stream</li><li>.svg - image/svg+xml</li><li>.woff - application/x-woff</li></ul><p>&nbsp;</p></div></div><div></div>'

# Configure CAWeb Options
wp option update ca_fav_ico http://template.webtools.ca.gov/favicon.ico --path="$WP_PATH"
wp option update header_ca_branding http://template.webtools.ca.gov/images/template-logo.png --path="$WP_PATH"
wp option update ca_frontpage_search_enabled false --path="$WP_PATH"


# Configure CAWeb Main Navigation
wp menu create "Main Menu" --path="$WP_PATH"
wp menu item add-post "Main Menu" 3 --title="Structure" --path="$WP_PATH"

wp menu location assign "Main Menu" header-menu --path="$WP_PATH"


wp menu create "Footer Menu" --path="$WP_PATH"
wp menu location assign "Footer Menu" footer-menu --path="$WP_PATH"
  
  
  
  
  
  touch .ransetup

fi




# Execute the original run script, replacing this script as current process.

exec /usr/libexec/s2i/run
